# Cloud-optimized Docker Compose for production deployment
version: '3.8'

services:
  # Load Balancer (nginx)
  nginx:
    image: nginx:alpine
    container_name: nist-csf-nginx
    restart: unless-stopped
    depends_on:
      - mcp-server-1
      - mcp-server-2
      - mcp-server-3
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx:rw
    networks:
      - mcp-cloud-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP Server Instance 1
  mcp-server-1:
    image: ghcr.io/rocklambros/nist-csf-2-mcp-server:latest
    container_name: mcp-server-1
    restart: unless-stopped
    hostname: mcp-server-1
    environment:
      - NODE_ENV=production
      - SERVER_PORT=8080
      - ENABLE_MONITORING=true
      - LOG_LEVEL=info
      - INSTANCE_ID=1
    env_file:
      - .env.production
    volumes:
      - server-1-logs:/app/logs
    networks:
      - mcp-cloud-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  # MCP Server Instance 2
  mcp-server-2:
    image: ghcr.io/rocklambros/nist-csf-2-mcp-server:latest
    container_name: mcp-server-2
    restart: unless-stopped
    hostname: mcp-server-2
    environment:
      - NODE_ENV=production
      - SERVER_PORT=8080
      - ENABLE_MONITORING=true
      - LOG_LEVEL=info
      - INSTANCE_ID=2
    env_file:
      - .env.production
    volumes:
      - server-2-logs:/app/logs
    networks:
      - mcp-cloud-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  # MCP Server Instance 3
  mcp-server-3:
    image: ghcr.io/rocklambros/nist-csf-2-mcp-server:latest
    container_name: mcp-server-3
    restart: unless-stopped
    hostname: mcp-server-3
    environment:
      - NODE_ENV=production
      - SERVER_PORT=8080
      - ENABLE_MONITORING=true
      - LOG_LEVEL=info
      - INSTANCE_ID=3
    env_file:
      - .env.production
    volumes:
      - server-3-logs:/app/logs
    networks:
      - mcp-cloud-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Monitoring Stack (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - mcp-cloud-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - mcp-cloud-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

# Named volumes for persistence
volumes:
  server-1-logs:
    driver: local
  server-2-logs:
    driver: local
  server-3-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Network configuration
networks:
  mcp-cloud-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
    driver_opts:
      com.docker.network.bridge.name: br-mcp-cloud